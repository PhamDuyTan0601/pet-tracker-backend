class WifiManager {
  constructor() {
    this.connectedDevice = null;
    this.isConnected = false;
    this.dataInterval = null;
  }

  // Qu√©t QR code WiFi
  scanWifiQR() {
    if (!auth.userId) {
      ui.showNotification("Vui l√≤ng ƒëƒÉng nh·∫≠p", "error");
      return;
    }

    const html = `
      <div class="modal active">
        <div class="modal-content">
          <h3>üì∑ Qu√©t QR Code WiFi</h3>
          <p>Qu√©t m√£ QR t·ª´ thi·∫øt b·ªã Pet Tracker</p>
          <div id="qrReader" style="width: 300px; height: 300px; margin: 20px auto; background: #f5f5f5; display: flex; align-items: center; justify-content: center; border: 2px dashed #ccc; border-radius: 10px;">
            <div style="text-align: center;">
              <div style="font-size: 48px;">üì±</div>
              <p>Camera s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t t·∫°i ƒë√¢y</p>
              <p style="font-size: 12px; color: #666;">(ƒêang gi·∫£ l·∫≠p cho demo)</p>
            </div>
          </div>
          <p>Ho·∫∑c nh·∫≠p th√¥ng tin th·ªß c√¥ng:</p>
          <button class="btn btn-primary" onclick="wifiManager.showWifiForm()">Nh·∫≠p Th·ªß C√¥ng</button>
          <button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">H·ªßy</button>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", html);

    // Gi·∫£ l·∫≠p qu√©t QR th√†nh c√¥ng sau 3 gi√¢y
    setTimeout(() => {
      document.querySelector(".modal")?.remove();
      this.handleScannedQR({
        deviceId: "PT" + Math.random().toString(36).substr(2, 4).toUpperCase(),
        wifiConfig: {
          ssid: "PetTracker_Network",
          password: "pet123456",
        },
        serverUrl: "https://pet-tracker-md3r.onrender.com",
      });
    }, 3000);
  }

  // Hi·ªÉn th·ªã form c·∫•u h√¨nh WiFi
  showWifiForm() {
    document.querySelector(".modal")?.remove();

    const html = `
      <div class="modal active">
        <div class="modal-content">
          <h3>‚öôÔ∏è C·∫•u H√¨nh WiFi</h3>
          <input type="text" id="wifiSSID" placeholder="T√™n WiFi (SSID)" class="form-input" value="PetTracker_Network">
          <input type="password" id="wifiPassword" placeholder="M·∫≠t kh·∫©u WiFi" class="form-input" value="pet123456">
          <input type="text" id="deviceId" placeholder="ID Thi·∫øt b·ªã (VD: PT001)" class="form-input" value="PT${Math.random()
            .toString(36)
            .substr(2, 4)
            .toUpperCase()}">
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-success" onclick="wifiManager.connectToWifi()">K·∫øt N·ªëi</button>
            <button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">H·ªßy</button>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", html);
  }

  // X·ª≠ l√Ω QR code ƒë√£ qu√©t
  handleScannedQR(qrData) {
    ui.showNotification(`‚úÖ ƒê√£ qu√©t thi·∫øt b·ªã: ${qrData.deviceId}`, "success");

    // Hi·ªÉn th·ªã th√¥ng tin WiFi
    const html = `
      <div class="modal active">
        <div class="modal-content">
          <h3>‚úÖ ƒê√£ Qu√©t Th√†nh C√¥ng</h3>
          <div class="wifi-info" style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <p><strong>Thi·∫øt b·ªã:</strong> ${qrData.deviceId}</p>
            <p><strong>WiFi SSID:</strong> ${qrData.wifiConfig.ssid}</p>
            <p><strong>M·∫≠t kh·∫©u:</strong> *******</p>
            <p><strong>Server:</strong> ${qrData.serverUrl}</p>
          </div>
          <p>H√£y c·∫•u h√¨nh thi·∫øt b·ªã v·ªõi th√¥ng tin tr√™n v√† ch·ªçn pet ƒë·ªÉ k·∫øt n·ªëi:</p>
          <select id="petSelectWifi" class="form-input">
            <option value="">-- Ch·ªçn Pet --</option>
          </select>
          <div style="display: flex; gap: 10px; margin-top: 15px;">
            <button class="btn btn-success" onclick="wifiManager.pairDevice('${qrData.deviceId}')">K·∫øt N·ªëi Ngay</button>
            <button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">H·ªßy</button>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", html);
    this.loadPetsForSelection();
  }

  // K·∫øt n·ªëi WiFi th·ªß c√¥ng
  async connectToWifi() {
    const ssid = document.getElementById("wifiSSID").value;
    const password = document.getElementById("wifiPassword").value;
    const deviceId = document.getElementById("deviceId").value;

    if (!ssid || !password || !deviceId) {
      ui.showNotification("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", "error");
      return;
    }

    ui.showNotification(
      `üì° ƒêang k·∫øt n·ªëi ${deviceId} ƒë·∫øn WiFi ${ssid}...`,
      "info"
    );

    document.querySelector(".modal")?.remove();

    // Gi·∫£ l·∫≠p k·∫øt n·ªëi th√†nh c√¥ng
    setTimeout(() => {
      this.handleScannedQR({
        deviceId: deviceId,
        wifiConfig: { ssid, password },
        serverUrl: "https://pet-tracker-md3r.onrender.com",
      });
    }, 2000);
  }

  // T·∫£i danh s√°ch pet ƒë·ªÉ ch·ªçn
  async loadPetsForSelection() {
    const pets = await petManager.loadPets();
    const select = document.getElementById("petSelectWifi");

    if (pets && pets.length > 0) {
      select.innerHTML =
        '<option value="">-- Ch·ªçn Pet --</option>' +
        pets
          .map(
            (pet) =>
              `<option value="${pet._id}">${pet.name} (${pet.species})</option>`
          )
          .join("");
    } else {
      select.innerHTML = '<option value="">Ch∆∞a c√≥ pet n√†o</option>';
    }
  }

  // Gh√©p n·ªëi thi·∫øt b·ªã v·ªõi pet
  async pairDevice(deviceId) {
    const petId = document.getElementById("petSelectWifi").value;

    if (!petId) {
      ui.showNotification("Vui l√≤ng ch·ªçn pet", "error");
      return;
    }

    try {
      ui.showNotification("üîÑ ƒêang gh√©p n·ªëi thi·∫øt b·ªã...", "info");

      // G·ªçi API gh√©p n·ªëi WiFi
      const response = await fetch("/api/wifi-devices/pair", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          userId: auth.userId,
        },
        body: JSON.stringify({
          deviceId: deviceId,
          petId: petId,
          userId: auth.userId,
        }),
      });

      const result = await response.json();

      if (result.success) {
        ui.showNotification("‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!", "success");
        document.querySelectorAll(".modal").forEach((modal) => modal.remove());

        // B·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu
        this.startReceivingData(deviceId);

        // Load l·∫°i danh s√°ch pet
        petManager.loadPets();
      } else {
        ui.showNotification(result.message, "error");
      }
    } catch (error) {
      ui.showNotification("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server", "error");
    }
  }

  // B·∫Øt ƒë·∫ßu nh·∫≠n d·ªØ li·ªáu t·ª´ thi·∫øt b·ªã WiFi
  startReceivingData(deviceId) {
    this.connectedDevice = deviceId;
    this.isConnected = true;

    ui.showNotification(`üì° ƒêang ch·ªù d·ªØ li·ªáu t·ª´ ${deviceId}...`, "info");

    // D·ª´ng interval c≈© n·∫øu c√≥
    if (this.dataInterval) {
      clearInterval(this.dataInterval);
    }

    // Gi·∫£ l·∫≠p nh·∫≠n d·ªØ li·ªáu m·ªói 5 gi√¢y
    this.dataInterval = setInterval(() => {
      if (this.isConnected) {
        this.handleReceivedData({
          deviceId: deviceId,
          type: "pet_data",
          latitude: 10.8231 + (Math.random() - 0.5) * 0.01,
          longitude: 106.6297 + (Math.random() - 0.5) * 0.01,
          speed: Math.random() * 10,
          battery: 80 + Math.random() * 20,
          timestamp: new Date().toISOString(),
        });
      }
    }, 5000);
  }

  // X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  handleReceivedData(data) {
    if (data.type === "pet_data") {
      ui.showPetData(data);
      ui.showNotification(
        `üìç Nh·∫≠n d·ªØ li·ªáu v·ªã tr√≠ t·ª´ ${data.deviceId}`,
        "success"
      );
    }
  }

  // Ng·∫Øt k·∫øt n·ªëi
  disconnect() {
    this.isConnected = false;
    this.connectedDevice = null;

    if (this.dataInterval) {
      clearInterval(this.dataInterval);
      this.dataInterval = null;
    }

    ui.showNotification("üì¥ ƒê√£ ng·∫Øt k·∫øt n·ªëi WiFi", "info");
  }
}

const wifiManager = new WifiManager();
