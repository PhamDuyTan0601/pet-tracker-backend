// File: wifiManager.js - PHI√äN B·∫¢N TH·ª∞C T·∫æ
class WifiManager {
  constructor() {
    this.connectedDevice = null;
    this.isConnected = false;
    this.dataInterval = null;
    this.lastData = null;
  }

  // Qu√©t QR code WiFi - TH·ª∞C T·∫æ
  scanWifiQR() {
    if (!auth.userId) {
      ui.showNotification("Vui l√≤ng ƒëƒÉng nh·∫≠p", "error");
      return;
    }

    const html = `
      <div class="modal active">
        <div class="modal-content">
          <h3>üì∑ Qu√©t QR Code WiFi</h3>
          <p>Qu√©t m√£ QR t·ª´ thi·∫øt b·ªã Pet Tracker</p>
          <div id="qrReader" style="width: 300px; height: 300px; margin: 20px auto; background: #f5f5f5; display: flex; align-items: center; justify-content: center; border: 2px dashed #ccc; border-radius: 10px;">
            <div style="text-align: center;">
              <div style="font-size: 48px;">üì±</div>
              <p>Camera s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t t·∫°i ƒë√¢y</p>
            </div>
          </div>
          <p>Ho·∫∑c nh·∫≠p Device ID th·ª±c t·∫ø:</p>
          <input type="text" id="manualDeviceId" placeholder="PT001, PT002..." class="form-input">
          <div style="display: flex; gap: 10px;">
            <button class="btn btn-primary" onclick="wifiManager.connectManual()">K·∫øt N·ªëi</button>
            <button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">H·ªßy</button>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", html);
  }

  // K·∫øt n·ªëi th·ªß c√¥ng v·ªõi Device ID th·ª±c
  async connectManual() {
    const deviceId = document.getElementById("manualDeviceId").value;
    if (!deviceId) {
      ui.showNotification("Vui l√≤ng nh·∫≠p Device ID th·ª±c t·∫ø", "error");
      return;
    }

    await this.connectToDevice(deviceId);
  }

  // K·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã th·ª±c t·∫ø
  async connectToDevice(deviceId) {
    try {
      ui.showNotification(`üîç ƒêang t√¨m thi·∫øt b·ªã ${deviceId}...`, "info");

      // Ki·ªÉm tra thi·∫øt b·ªã c√≥ t·ªìn t·∫°i kh√¥ng
      const deviceExists = await this.checkDeviceExists(deviceId);
      if (!deviceExists) {
        ui.showNotification(
          "‚ùå Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a g·ª≠i d·ªØ li·ªáu",
          "error"
        );
        return;
      }

      // Hi·ªÉn th·ªã ch·ªçn pet
      await this.showPetSelection(deviceId);
    } catch (error) {
      ui.showNotification("L·ªói k·∫øt n·ªëi: " + error.message, "error");
    }
  }

  // Ki·ªÉm tra thi·∫øt b·ªã c√≥ t·ªìn t·∫°i trong database kh√¥ng
  async checkDeviceExists(deviceId) {
    try {
      const response = await fetch(`/api/wifi-devices/check/${deviceId}`);
      const result = await response.json();
      return result.exists;
    } catch (error) {
      return false;
    }
  }

  // Hi·ªÉn th·ªã ch·ªçn pet cho thi·∫øt b·ªã th·ª±c
  async showPetSelection(deviceId) {
    document.querySelector(".modal")?.remove();

    const pets = await petManager.loadPets();

    const html = `
      <div class="modal active">
        <div class="modal-content">
          <h3>üîó K·∫øt N·ªëi Thi·∫øt B·ªã Th·ª±c</h3>
          <div class="wifi-info">
            <p><strong>Device ID:</strong> ${deviceId}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> <span class="status-online">‚úÖ ƒêang ho·∫°t ƒë·ªông</span></p>
            <p><em>Thi·∫øt b·ªã n√†y s·∫Ω g·ª≠i d·ªØ li·ªáu GPS th·ª±c t·∫ø</em></p>
          </div>
          <p>Ch·ªçn pet ƒë·ªÉ k·∫øt n·ªëi:</p>
          <select id="petSelectWifi" class="form-input">
            <option value="">-- Ch·ªçn Pet --</option>
            ${pets
              .map(
                (pet) =>
                  `<option value="${pet._id}">${pet.name} (${pet.species})</option>`
              )
              .join("")}
          </select>
          <div style="display: flex; gap: 10px; margin-top: 15px;">
            <button class="btn btn-success" onclick="wifiManager.pairRealDevice('${deviceId}')">K·∫øt N·ªëi Thi·∫øt B·ªã Th·ª±c</button>
            <button class="btn btn-danger" onclick="this.parentElement.parentElement.remove()">H·ªßy</button>
          </div>
        </div>
      </div>
    `;

    document.body.insertAdjacentHTML("beforeend", html);
  }

  // Gh√©p n·ªëi thi·∫øt b·ªã TH·ª∞C T·∫æ
  async pairRealDevice(deviceId) {
    const petId = document.getElementById("petSelectWifi").value;

    if (!petId) {
      ui.showNotification("Vui l√≤ng ch·ªçn pet", "error");
      return;
    }

    try {
      ui.showNotification("üîÑ ƒêang gh√©p n·ªëi thi·∫øt b·ªã th·ª±c...", "info");

      const response = await fetch("/api/wifi-devices/pair", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          userId: auth.userId,
        },
        body: JSON.stringify({
          deviceId: deviceId,
          petId: petId,
          userId: auth.userId,
        }),
      });

      const result = await response.json();

      if (result.success) {
        ui.showNotification("‚úÖ K·∫øt n·ªëi thi·∫øt b·ªã th·ª±c th√†nh c√¥ng!", "success");
        document.querySelectorAll(".modal").forEach((modal) => modal.remove());

        // B·∫Øt ƒë·∫ßu theo d√µi d·ªØ li·ªáu TH·ª∞C
        this.startRealTimeMonitoring(deviceId, petId);

        // Load l·∫°i danh s√°ch pet
        petManager.loadPets();
      } else {
        ui.showNotification(result.message, "error");
      }
    } catch (error) {
      ui.showNotification("‚ùå L·ªói k·∫øt n·ªëi server", "error");
    }
  }

  // B·∫Øt ƒë·∫ßu theo d√µi d·ªØ li·ªáu TH·ª∞C T·∫æ t·ª´ ESP32
  startRealTimeMonitoring(deviceId, petId) {
    this.connectedDevice = deviceId;
    this.isConnected = true;

    ui.showNotification(
      `üì° ƒêang theo d√µi d·ªØ li·ªáu th·ª±c t·ª´ ${deviceId}...`,
      "success"
    );

    // D·ª´ng interval c≈© n·∫øu c√≥
    if (this.dataInterval) {
      clearInterval(this.dataInterval);
    }

    // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ server m·ªói 3 gi√¢y
    this.dataInterval = setInterval(async () => {
      if (this.isConnected) {
        await this.fetchRealData(deviceId, petId);
      }
    }, 3000);
  }

  // L·∫•y d·ªØ li·ªáu TH·ª∞C T·∫æ t·ª´ server
  async fetchRealData(deviceId, petId) {
    try {
      const response = await fetch(`/api/pet-data/pet/${petId}/latest`);
      const result = await response.json();

      if (result.success && result.data) {
        const realData = result.data;

        // Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
        if (!this.lastData || this.lastData.timestamp !== realData.timestamp) {
          this.handleRealData({
            deviceId: deviceId,
            type: "real_pet_data",
            latitude: realData.latitude,
            longitude: realData.longitude,
            speed: realData.speed || 0,
            battery: realData.batteryLevel || 85,
            satellites: realData.satellites || 0,
            accuracy: realData.accuracy || 5.0,
            timestamp: realData.timestamp,
          });

          this.lastData = realData;
        }
      }
    } catch (error) {
      console.log("Ch∆∞a c√≥ d·ªØ li·ªáu th·ª±c t·ª´ ESP32");
    }
  }

  // X·ª≠ l√Ω d·ªØ li·ªáu TH·ª∞C nh·∫≠n ƒë∆∞·ª£c
  handleRealData(data) {
    if (data.type === "real_pet_data") {
      ui.showRealPetData(data);

      // Ch·ªâ th√¥ng b√°o khi c√≥ d·ªØ li·ªáu m·ªõi
      const now = new Date();
      const dataTime = new Date(data.timestamp);
      const diffMinutes = (now - dataTime) / (1000 * 60);

      if (diffMinutes < 5) {
        // D·ªØ li·ªáu trong 5 ph√∫t g·∫ßn ƒë√¢y
        ui.showNotification(
          `üìç Nh·∫≠n d·ªØ li·ªáu TH·ª∞C t·ª´ ${data.deviceId} - ${data.satellites} v·ªá tinh`,
          "success"
        );
      }
    }
  }

  // Ng·∫Øt k·∫øt n·ªëi
  disconnect() {
    this.isConnected = false;
    this.connectedDevice = null;
    this.lastData = null;

    if (this.dataInterval) {
      clearInterval(this.dataInterval);
      this.dataInterval = null;
    }

    ui.showNotification("üì¥ ƒê√£ ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã th·ª±c", "info");

    // ·∫®n panel data
    document.getElementById("dataPanel").style.display = "none";
  }

  // Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã
  async checkDeviceStatus(deviceId) {
    try {
      const response = await fetch(`/api/wifi-devices/status/${deviceId}`);
      const result = await response.json();
      return result;
    } catch (error) {
      return { online: false, lastSeen: null };
    }
  }
}

const wifiManager = new WifiManager();
