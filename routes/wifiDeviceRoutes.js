// C·∫¨P NH·∫¨T ENDPOINT NH·∫¨N D·ªÆ LI·ªÜU
router.post(
  "/data",
  [
    body("deviceId").notEmpty().withMessage("Device ID is required"),
    body("latitude").isFloat({ min: -90, max: 90 }),
    body("longitude").isFloat({ min: -180, max: 180 }),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          errors: errors.array(),
        });
      }

      const {
        deviceId,
        latitude,
        longitude,
        speed,
        batteryLevel,
        satellites,
        accuracy,
      } = req.body;

      console.log("üì° NH·∫¨N D·ªÆ LI·ªÜU T·ª™ ESP32:", {
        deviceId,
        latitude,
        longitude,
        speed,
        batteryLevel,
        satellites,
        accuracy,
      });

      // T√¨m device theo deviceId
      const wifiDevice = await WifiDevice.findOne({ deviceId }).populate(
        "petId"
      );
      if (!wifiDevice) {
        return res.status(404).json({
          success: false,
          message: "Thi·∫øt b·ªã ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω",
        });
      }

      // T·∫°o b·∫£n ghi d·ªØ li·ªáu pet
      const petData = new PetData({
        petId: wifiDevice.petId._id,
        latitude,
        longitude,
        speed: speed || 0,
        batteryLevel: batteryLevel || 100,
        satellites: satellites || 0,
        accuracy: accuracy || 10.0,
        source: "wifi",
        timestamp: new Date(),
      });

      await petData.save();

      // C·∫≠p nh·∫≠t last seen
      wifiDevice.lastSeen = new Date();
      wifiDevice.status = "online";
      await wifiDevice.save();

      // C·∫≠p nh·∫≠t last seen cho pet
      await Pet.findByIdAndUpdate(wifiDevice.petId._id, {
        lastSeen: new Date(),
        "deviceInfo.lastSeen": new Date(),
      });

      console.log("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu cho pet:", wifiDevice.petId.name);

      res.json({
        success: true,
        message: "ƒê√£ nh·∫≠n d·ªØ li·ªáu th√†nh c√¥ng",
        dataId: petData._id,
      });
    } catch (error) {
      console.error("‚ùå L·ªói nh·∫≠n d·ªØ li·ªáu ESP32:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi x·ª≠ l√Ω d·ªØ li·ªáu",
      });
    }
  }
);
